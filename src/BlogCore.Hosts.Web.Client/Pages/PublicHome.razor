@page "/"
@page "/{Page:int}"
@layout NoLayout
@inject BlogService BlogService
@inject PostService PostService

<div class="jumbotron jumbotron-fluid">
    <div class="container">
        <h1 class="display-4">@Blog.Title</h1>
        <p class="lead">@Blog.Description</p>
        <NavLink href="/dashboard" class="p-1 bg-danger text-white">Dashboard</NavLink>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            @foreach (var post in Posts)
            {
                <!-- Post -->
                <div class="post">
                    <div class="user-block">
                        <h1>
                            <a href="/post/@post.Id">@post.Title</a>
                        </h1>
                        <div>Created at @post.CreatedAt</div>
                    </div>
                    <!-- /.user-block -->
                    <p>
                        @post.Excerpt...
                    </p>
                    <p>
                        @RenderTag(post)
                    </p>
                    <p>
                        <a href="#" class="link-black text-sm mr-2"><i class="fas fa-share mr-1"></i> Share</a>
                        <a href="#" class="link-black text-sm"><i class="far fa-thumbs-up mr-1"></i> Like</a>
                        <span class="float-right">
                            <NavLink href="#" class="link-black text-sm">
                                <i class="far fa-comments mr-1"></i> Comments (5)
                            </NavLink>
                        </span>
                    </p>
                </div>
                <!-- /.post -->
            }
        </div>

        <div class="col-md-12">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-end">
                    <li class="page-item">
                        <a class="page-link" href="" tabindex="-1" @onclick=@(async () => await OnPrevious(Page - 1))>Previous</a>
                    </li>
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        <li class="page-item"><a class="page-link" href="/@i" @onclick=@((e) => { })>@i</a></li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="" @onclick=@(async () => await OnNext(Page + 1))>Next</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<div class="container-fluid" style="padding: 50px 30px 10px;">
    <footer>
        <div class="float-right d-none d-sm-block">
            <b>Version</b> 3.0.0-beta.1
        </div>
        <strong>Copyright &copy; 2014-2018 <a href="http://adminlte.io">AdminLTE.io</a>.</strong> All rights
        reserved.
    </footer>
</div>

@code {
    [Parameter] int Page { get; set; } = 1;
    BlogDto Blog = new BlogDto();
    List<PostDto> Posts = new List<PostDto>();
    int TotalItems = 0;
    int TotalPages = 0;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    async Task OnNext(int page)
    {
        Page = page <= TotalPages ? page : TotalPages;
        await LoadDataAsync();
    }

    async Task OnPrevious(int page)
    {
        Page = page >= 1 ? page : 1;
        await LoadDataAsync();
    }

    async Task LoadDataAsync()
    {
        var blogId = Guid.NewGuid();
        var blogResultModel = await BlogService.GetBlogInfo(blogId);
        var postResultModel = await PostService.GetPostsByBlog(blogId, Page);

        Blog = blogResultModel.Data.Blog;
        Posts = postResultModel.Data.Posts.ToList();

        TotalItems = postResultModel.Data.TotalItems;
        TotalPages = postResultModel.Data.TotalPages;
    }

    MarkupString RenderTag(PostDto post)
    {
        var result = post.Tags
            .Select(x => x?.Name)
            .Aggregate("", (r, x) => r + string.Format("&nbsp;<span class=\"badge badge-info\">{0}</span>", x));

        return (MarkupString)result;
    }
}