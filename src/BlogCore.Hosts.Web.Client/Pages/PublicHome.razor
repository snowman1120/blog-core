@page "/"
@page "/{Page:int}"
@layout NoLayout
@inject BlogService BlogService
@inject PostService PostService

<PublicBlogHeader Title="@Blog.Title" Description="@Blog.Description">
    <NavLinks>
        <NavLink href="/dashboard" class="p-1 bg-danger text-white">Dashboard</NavLink>
    </NavLinks>
</PublicBlogHeader>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            @foreach (var post in Posts)
            {
                <!-- Post -->
                <div class="post">
                    <div class="user-block">
                        <h1>
                            <a href="/@Blog.Title.GenerateSlug()/post/@post.Slug/@post.Id/@Blog.Id">@post.Title</a>
                        </h1>
                        <div>Created at @post.CreatedAt</div>
                    </div>
                    <!-- /.user-block -->
                    <p>
                        @post.Excerpt...
                    </p>
                    <p>
                        @RenderTag(post)
                    </p>
                    <p>
                        <a href="#" class="link-black text-sm mr-2"><i class="fas fa-share mr-1"></i> Share</a>
                        <a href="#" class="link-black text-sm"><i class="far fa-thumbs-up mr-1"></i> Like</a>
                        <span class="float-right">
                            <NavLink href="#" class="link-black text-sm">
                                <i class="far fa-comments mr-1"></i> Comments (5)
                            </NavLink>
                        </span>
                    </p>
                </div>
                <!-- /.post -->
            }
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <BadminLtePagination Page="@Page"
                                 TotalPages="@TotalPages"
                                 OnPageClick="@OnPageClick">
            </BadminLtePagination>
        </div>
    </div>
</div>

<PublicBlogFooter></PublicBlogFooter>

@code {
    [Parameter] int Page { get; set; } = 1;

    BlogDto Blog = new BlogDto();
    List<PostDto> Posts = new List<PostDto>();
    int TotalPages = 0;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync(Page);
    }

    async Task OnPageClick(int page)
    {
        await LoadDataAsync(page);
        Page = page;
    }

    async Task LoadDataAsync(int page)
    {
        var blogId = Guid.NewGuid();
        var blogResultModel = await BlogService.GetBlogInfo(blogId);
        var postResultModel = await PostService.GetPostsByBlog(blogId, page);

        Blog = blogResultModel.Data.Blog;
        Posts = postResultModel.Data.Posts.ToList();
        TotalPages = postResultModel.Data.TotalPages;
    }

    MarkupString RenderTag(PostDto post)
    {
        var result = post.Tags
            .Select(x => x?.Name)
            .Aggregate("", (r, x) => r + string.Format("&nbsp;<span class=\"badge badge-info\">{0}</span>", x));

        return (MarkupString)result;
    }
}