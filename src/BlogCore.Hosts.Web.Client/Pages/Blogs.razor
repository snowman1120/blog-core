@page "/blogs"
@page "/blogs/{Page:int}"
@attribute [Authorize]
@inject BlogService BlogService
@inject IJSRuntime JS

@if (AppState.Blogs == null || AppState.Blogs.Count <= 0)
{
    <p><i class="fas fa-spinner fa-pulse"></i></p>
}
else
{
    <div style="width: 100%">
        <div class="card">
            <div class="card-header">
                <button class="btn btn-primary btn-sm">New</button>
                <button class="btn btn-danger btn-sm">Delete Selected</button>
            </div>
            <div class="card-body">
                <table id="blogs" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Desc</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var blog in @AppState.Blogs)
                        {
                            <tr>
                                <td>
                                    <a @onclick="(e) => { }" href="/blog/@blog.Id">
                                        @blog.Title
                                    </a>
                                </td>
                                <td>@blog.Description</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Title</th>
                            <th>Desc</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
}

@code {
    [Parameter] int Page { get; set; } = 1;
    [CascadingParameter] AppState AppState { get; set; }

    protected override async Task OnInitAsync()
    {
        AppState.SetContentHeader("Blog", new List<BreadcrumbItem> {
                new BreadcrumbItem { Text = "Home", Route = "#" },
                new BreadcrumbItem { Text = "Blogs", Route = "blogs" }
        });

        var resultModel = await BlogService.GetBlogs(Page);
        AppState.SetBlogs(resultModel.Data.Items);
    }

    protected override async Task OnAfterRenderAsync()
    {
        await JS.BindBlogDataTableAsync();
    }
}