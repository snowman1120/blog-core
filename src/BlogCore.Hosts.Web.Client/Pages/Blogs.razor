@page "/blogs"
@page "/blogs/{Page:int}"
@attribute [Authorize]
@inject BlogService BlogService
@inject IJSRuntime JS

<div class="container-fluid">
    <BadminLteCard>
        <CardHeader>
            <NavLink href="create-blog" class="btn btn-primary btn-sm">New</NavLink>
            <button class="btn btn-danger btn-sm">Delete Selected</button>
        </CardHeader>
        <CardBody>
            <BadminLteTable TableId="blogs"
                            LoadItemHeaders="@TableHeaders"
                            DataLoader="@LoadBlogs"
                            DataLoaded="@BindTable"
                            DataUnloaded="@UnbindTable">
                <LoadingContent><p><i class="fas fa-spinner fa-pulse"></i></p></LoadingContent>
                <EmptyContent>&nbsp;</EmptyContent>
                <ItemContent Context="item">
                    <td>
                        <a @onclick="(e) => { }" href="/blog/@item.Id">
                            @item.Title
                        </a>
                    </td>
                    <td>@item.Description</td>
                </ItemContent>
            </BadminLteTable>
        </CardBody>
    </BadminLteCard>
</div>

@code {
    [Parameter] int Page { get; set; } = 1;
    [CascadingParameter] AppState AppState { get; set; }

    protected override Task OnInitAsync()
    {
        AppState.SetContentHeader("Blog", new List<BreadcrumbItem> {
                new BreadcrumbItem { Text = "Home", Route = "#" },
                new BreadcrumbItem { Text = "Blogs", Route = "blogs" }
        });
        return Task.CompletedTask;
    }

    List<string> TableHeaders()
    {
        return new[] { "Title", "Desc" }.ToList();
    }

    async Task<List<BlogDto>> LoadBlogs()
    {
        var resultModel = await BlogService.GetBlogs(Page);
        var blogs = resultModel.Data.Items.Select(x => x.DeserializeData<BlogDto>());
        return blogs.ToList();
    }

    async Task BindTable()
    {
        await JS.BindBlogDataTableAsync();
    }

    async Task UnbindTable()
    {
        await JS.UnbindBlogDataTableAsync();
    }
}
